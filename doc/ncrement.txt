*ncrement.txt*  an enhancer to edit your own enums.

Version: 1.0
Author: giwa
============================================================
CONTENTS                                *ncrement-contents*

Introduction          |ncrement-introduction|
Usage                 |ncrement-usage|
Sample Keymappings    |ncrement-keymapping|
============================================================
Introduction                        *ncrement-introduction*

*ncrement* provides incremental/decremental word-shifting
features.
It behaves similarly to <C-a> and <C-d> on your editing line.

Suppose, execute :NcrementNext to change "Monday" to "Tuesday".


Inspired by monday.vim by Stefan Karisson.
https://www.vim.org/scripts/script.php?script_id=1046

============================================================
Usage                                      *ncrement-usage*
------------------------------------------------------------
                                            *:NcrementNext*
:NcrementNext changes a word to next word in word lists.
                                            *:NcrementPrev*
:NcrementPrev is a backward one.

Say you are editing line below, and your cursor is at its head.

    One fine day, it was Monday, a monkey finds a banana.

You can change Monday to Tuesday to execute :NcrementNext.
If :NcrementPrev is called instead, you'll find it becomes Sunday.

These commands searches pre-defined word lists and your own ones.
You have a day list, starts with Monday.
ncrement can rotate it. Monday is next to Sunday though they 
are first and last words in the day list.

To have your own word lists, see |ncrement-ownlists|
To check what words are available, refer to |:NcrementCheckLists|.


                                        *ncrement-ownlists*
You can have your own word lists.
Define them as below. They are simple String lists.

    let g:ncrement_u_wordlist_1 = ["Female", "Male"]
    let g:ncrement_u_wordlist_2 = ["Monkey", "Ape", "Human"]

Names of your lists must start with "g:ncrement_u_wordlist_".


                                   *ncrement-ignoredefault*
ncrement has some built-in word lists.
|:NcrementCheckLists| is a command to check what are defined.
Sometimes you may feel it annoying.
To ignore the default lists, you have an option.

    let g:ncrement_use_dlists=0


                                *ncrement-specify-wordlist*
Basically ncrement cannot have same words in different lists.
Let's say, if you have two lists as below.

    let g:ncrement_u_wordlist_x = ["april", "may", "june"]
    let g:ncrement_u_wordlist_y = ["may", "should", "must"]

ncrement cannot judge which word "june" or "should" does 
succeed to "may".
You would find unexpected behaviors with the word lists.

One solution here.
You can specify a word list to search with the commands below.
                                          *:NcrementNextOf*
    :NcrementNextOf {word_list_name}
                                          *:NcrementPrevOf*
    :NcrementPrevOf {word_list_name}

A recommended way is keymap, such as the following.

    nnoremap <silent><leader>w1n :<C-u>NcrementNextOf ncrement_u_wordlist_1<CR>


                                      *:NcrementCheckLists*
You can check what are defined with a command :NcrementCheckLists.

                                      *ncrement-autoupdate*
ncrement always fetches word lists to find your words.
So your update on the settings above will be reflected
immediately.
But it perhaps makes processes slow.
To avoid it, you can have it perform only when you call.

    let g:ncrement_autoupdate=0

                                     *:NcrementUpdateLists*
:NcrementUpdateLists is the command to update word lists manually.

============================================================
Sample Keymappings                    *ncrement-keymapping*

    nnoremap <silent><leader>n :<C-u>call ncrement#nextword(v:count1)<CR>
    nnoremap <silent><leader>p :<C-u>call ncrement#prevword(v:count1)<CR>

                                           *ncrement-count*
ncrement can get a count parameter.
`:2NcrementNext` changes "Monday" to "Wednesday" directly.
The example keymaps enables you to call functions with count.
With them, `2<leader>n` becomes to behave as same as the command above.

